# -*- coding: utf-8 -*-
"""stock_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KSWlB2g9tN8uBAaHx2tHWM_fVoWQlLk0
"""

#CODE COURTESY - SANJAY T

import numpy as np
import math
import matplotlib.pyplot as plt
import pandas as pd
import pandas_datareader as web
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense,LSTM


plt.style.use('fivethirtyeight')

code = input("Enter the name of the stock to predict : ")

begin = input("Enter the start date for training data (YYYY-MM-DD) : ")

fin = input("Enter the last date of prediction (YYYY-MM-DD) : ")

df = web.DataReader(code,data_source='yahoo',start=begin,end=fin)
dataset = df.values
data = df.filter(['Close'])
dataset = data.values
training_data_len = math.ceil(len(dataset)* .8)

#Scaling
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

#Training dataset and Scaled Training dataset
train_data = scaled_data[0:training_data_len,:]
#Split the data into x_train and y_train
x_train=[]
y_train=[]
 
for i in range(60,len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])

#Convert x_train and y_train to arrays
x_train, y_train = np.array(x_train),np.array(y_train)

#Reshaping
x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))

#LSTM Model
model = Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#Compile the model
model.compile(optimizer='adam',loss='mean_squared_error')

#Train the model
model.fit(x_train,y_train,batch_size=1,epochs=5)

#Create the testing dataset
test_data = scaled_data[training_data_len-60:,:]
#Create datasets x_test and y_test
x_test=[]
y_test=dataset[training_data_len:,:]
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

#Convert the data to a numpy array
x_test = np.array(x_test)

#Reshape the data
x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

#Get the models predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#Get the RMS error
rmse = np.sqrt(np.mean(predictions - y_test)**2)
print(rmse)

#Plot the data
train = data[0:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#Visualizing the data
plt.figure(figsize=(16,8))
plt.title(code + ' - Prediction')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price in USD ($)',fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Actual Values','Predictions'],loc = 'lower right')
plt.show()

#Show the valid and predicted prices
valid

rmse

#Get quote
google_quote = web.DataReader(code,data_source='yahoo',start='2000-01-01',end='2020-05-29')
#Create new dataframe
new_df = google_quote.filter(['Close'])
#Get the last 60 day closing price values
last_60_days = new_df[-60:].values
#Scale
last_60_days_scaled = scaler.transform(last_60_days)
#Create an empty list
X_test = []
X_test.append(last_60_days_scaled)
#Convert to array
X_test = np.array(X_test)
#Reshape
X_test = np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
#Get predicted scaled price
pred_price = model.predict(X_test)
#Undo scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

google_quote2 = web.DataReader(code,data_source='yahoo',start='2020-05-03',end='2020-05-03')
print(google_quote2['Close'])

